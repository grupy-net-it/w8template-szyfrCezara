<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StyleMVVM.Controls</name>
    </assembly>
    <members>
        <member name="T:StyleMVVM.Controls.Common.InteractionHelper">
            <summary>
            The InteractionHelper provides controls with support for all of the
            common interactions like mouse movement, mouse clicks, key presses,
            etc., and also incorporates proper event semantics when the control is
            disabled.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.InteractionHelper.SequentialClickThresholdInMilliseconds">
            <summary>
            The threshold used to determine whether two clicks are temporally
            local and considered a double click (or triple, quadruple, etc.).
            500 milliseconds is the default double click value on Windows.
            This value would ideally be pulled form the system settings.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.InteractionHelper.SequentialClickThresholdInPixelsSquared">
            <summary>
            The threshold used to determine whether two clicks are spatially
            local and considered a double click (or triple, quadruple, etc.)
            in pixels squared.  We use pixels squared so that we can compare to
            the distance delta without taking a square root.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.InteractionHelper._updateVisualState">
            <summary>
            Reference used to call UpdateVisualState on the base class.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.#ctor(Windows.UI.Xaml.Controls.Control)">
            <summary>
            Initializes a new instance of the InteractionHelper class.
            </summary>
            <param name="control">Control receiving interaction.</param>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
            <remarks>
            UpdateVisualState works differently than the rest of the injected
            functionality.  Most of the other events are overridden by the
            calling class which calls Allow, does what it wants, and then calls
            Base.  UpdateVisualState is the opposite because a number of the
            methods in InteractionHelper need to trigger it in the calling
            class.  We do this using the IUpdateVisualState internal interface.
            </remarks>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.UpdateVisualStateBase(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.OnLoaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Handle the control's Loaded event.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.OnIsEnabledChanged(System.Object,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the control's IsEnabled property.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.OnIsReadOnlyChanged(System.Boolean)">
            <summary>
            Handles changes to the control's IsReadOnly property.
            </summary>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.OnApplyTemplateBase">
            <summary>
            Update the visual state of the control when its template is changed.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.AllowGotFocus(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Check if the control's GotFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.OnGotFocusBase">
            <summary>
            Base implementation of the virtual GotFocus event handler.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.AllowLostFocus(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Check if the control's LostFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.OnLostFocusBase">
            <summary>
            Base implementation of the virtual LostFocus event handler.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.AllowMouseEnter(Windows.Devices.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseEnter event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.OnMouseEnterBase">
            <summary>
            Base implementation of the virtual MouseEnter event handler.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.AllowMouseLeave(Windows.Devices.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseLeave event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.OnMouseLeaveBase">
            <summary>
            Base implementation of the virtual MouseLeave event handler.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.OnMouseLeftButtonDownBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonDown event
            handler.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.OnMouseLeftButtonUpBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonUp event handler.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.AllowKeyDown(Windows.UI.Core.KeyEventArgs)">
            <summary>
            Check if the control's KeyDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:StyleMVVM.Controls.Common.InteractionHelper.AllowKeyUp(Windows.UI.Core.KeyEventArgs)">
            <summary>
            Check if the control's KeyUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="P:StyleMVVM.Controls.Common.InteractionHelper.Control">
            <summary>
            Gets the control the InteractionHelper is targeting.
            </summary>
        </member>
        <member name="P:StyleMVVM.Controls.Common.InteractionHelper.IsFocused">
            <summary>
            Gets a value indicating whether the control has focus.
            </summary>
        </member>
        <member name="P:StyleMVVM.Controls.Common.InteractionHelper.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary> 
        </member>
        <member name="P:StyleMVVM.Controls.Common.InteractionHelper.IsReadOnly">
            <summary>
            Gets a value indicating whether the read-only property is set.
            </summary>
        </member>
        <member name="P:StyleMVVM.Controls.Common.InteractionHelper.IsPressed">
            <summary>
            Gets a value indicating whether the mouse button is pressed down
            over the control.
            </summary>
        </member>
        <member name="P:StyleMVVM.Controls.Common.InteractionHelper.LastClickTime">
            <summary>
            Gets or sets the last time the control was clicked.
            </summary>
            <remarks>
            The value is stored as Utc time because it is slightly more
            performant than converting to local time.
            </remarks>
        </member>
        <member name="P:StyleMVVM.Controls.Common.InteractionHelper.LastClickPosition">
            <summary>
            Gets or sets the mouse position of the last click.
            </summary>
            <remarks>The value is relative to the control.</remarks>
        </member>
        <member name="P:StyleMVVM.Controls.Common.InteractionHelper.ClickCount">
            <summary>
            Gets the number of times the control was clicked.
            </summary>
        </member>
        <member name="T:StyleMVVM.Controls.Common.ItemsControlHelper">
            <summary>
            The ItemContainerGenerator provides useful utilities for ItemsControls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:StyleMVVM.Controls.Common.ItemsControlHelper._itemsHost">
            <summary>
            A Panel that is used as the ItemsHost of the ItemsControl.  This
            property will only be valid when the ItemsControl is live in the
            tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.ItemsControlHelper._scrollHost">
            <summary>
            A ScrollViewer that is used to scroll the items in the ItemsHost.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Common.ItemsControlHelper.#ctor(Windows.UI.Xaml.Controls.ItemsControl)">
            <summary>
            Initializes a new instance of the ItemContainerGenerator.
            </summary>
            <param name="control">
            The ItemsControl being tracked by the ItemContainerGenerator.
            </param>
        </member>
        <member name="M:StyleMVVM.Controls.Common.ItemsControlHelper.OnApplyTemplate">
            <summary>
            Apply a control template to the ItemsControl.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Common.ItemsControlHelper.PrepareContainerForItemOverride(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.Style)">
            <summary>
            Prepares the specified container to display the specified item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="parentItemContainerStyle">
            The ItemContainerStyle for the parent ItemsControl.
            </param>
        </member>
        <member name="M:StyleMVVM.Controls.Common.ItemsControlHelper.UpdateItemContainerStyle(Windows.UI.Xaml.Style)">
            <summary>
            Update the style of any generated items when the ItemContainerStyle
            has been changed.
            </summary>
            <param name="itemContainerStyle">The ItemContainerStyle.</param>
            <remarks>
            Silverlight does not support setting a Style multiple times, so we
            only attempt to set styles on elements whose style hasn't already
            been set.
            </remarks>
        </member>
        <member name="M:StyleMVVM.Controls.Common.ItemsControlHelper.ScrollIntoView(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Scroll the desired element into the ScrollHost's viewport.
            </summary>
            <param name="element">Element to scroll into view.</param>
        </member>
        <member name="P:StyleMVVM.Controls.Common.ItemsControlHelper.ItemsControl">
            <summary>
            Gets or sets the ItemsControl being tracked by the
            ItemContainerGenerator.
            </summary>
        </member>
        <member name="P:StyleMVVM.Controls.Common.ItemsControlHelper.ItemsHost">
            <summary>
            Gets a Panel that is used as the ItemsHost of the ItemsControl.
            This property will only be valid when the ItemsControl is live in
            the tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="P:StyleMVVM.Controls.Common.ItemsControlHelper.ScrollHost">
            <summary>
            Gets a ScrollViewer that is used to scroll the items in the
            ItemsHost.
            </summary>
        </member>
        <member name="T:StyleMVVM.Controls.Common.IUpdateVisualState">
            <summary>
            The IUpdateVisualState interface is used to provide the
            InteractionHelper with access to the type's UpdateVisualState method.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Common.IUpdateVisualState.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="T:StyleMVVM.Controls.Common.NumericExtensions">
            <summary>
            Numeric utility methods used by controls.  These methods are similar in
            scope to the WPF DoubleUtil class.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Common.NumericExtensions.IsZero(System.Double)">
            <summary>
            Check if a number is zero.
            </summary>
            <param name="value">The number to check.</param>
            <returns>True if the number is zero, false otherwise.</returns>
        </member>
        <member name="M:StyleMVVM.Controls.Common.NumericExtensions.IsNaN(System.Double)">
            <summary>
            Check if a number isn't really a number.
            </summary>
            <param name="value">The number to check.</param>
            <returns>
            True if the number is not a number, false if it is a number.
            </returns>
        </member>
        <member name="M:StyleMVVM.Controls.Common.NumericExtensions.IsGreaterThan(System.Double,System.Double)">
            <summary>
            Determine if one number is greater than another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is greater than the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:StyleMVVM.Controls.Common.NumericExtensions.IsLessThanOrClose(System.Double,System.Double)">
            <summary>
            Determine if one number is less than or close to another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is less than or close to the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:StyleMVVM.Controls.Common.NumericExtensions.AreClose(System.Double,System.Double)">
            <summary>
            Determine if two numbers are close in value.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is close in value to the second, false
            otherwise.
            </returns>
        </member>
        <member name="T:StyleMVVM.Controls.Common.NumericExtensions.NanUnion">
            <summary>
            NanUnion is a C++ style type union used for efficiently converting
            a double into an unsigned long, whose bits can be easily
            manipulated.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.NumericExtensions.NanUnion.FloatingValue">
            <summary>
            Floating point representation of the union.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.NumericExtensions.NanUnion.IntegerValue">
            <summary>
            Integer representation of the union.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.GroupCommon">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateNormal">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateReadOnly">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateMouseOver">
            <summary>
            MouseOver state of the Common state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StatePressed">
            <summary>
            Pressed state of the Common state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateDisabled">
            <summary>
            Disabled state of the Common state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.GroupFocus">
            <summary>
            Focus state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateUnfocused">
            <summary>
            Unfocused state of the Focus state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateFocused">
            <summary>
            Focused state of the Focus state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.GroupSelection">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateSelected">
            <summary>
            Selected state of the Selection state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateUnselected">
            <summary>
            Unselected state of the Selection state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateSelectedInactive">
            <summary>
            Selected inactive state of the Selection state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.GroupExpansion">
            <summary>
            Expansion state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateExpanded">
            <summary>
            Expanded state of the Expansion state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateCollapsed">
            <summary>
            Collapsed state of the Expansion state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.GroupPopup">
            <summary>
            Popup state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StatePopupOpened">
            <summary>
            Opened state of the Popup state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StatePopupClosed">
            <summary>
            Closed state of the Popup state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.GroupValidation">
            <summary>
            ValidationStates state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateValid">
            <summary>
            The valid state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateInvalidFocused">
            <summary>
            Invalid, focused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateInvalidUnfocused">
            <summary>
            Invalid, unfocused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.GroupExpandDirection">
            <summary>
            ExpandDirection state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateExpandDown">
            <summary>
            Down expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateExpandUp">
            <summary>
            Up expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateExpandLeft">
            <summary>
            Left expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateExpandRight">
            <summary>
            Right expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.GroupHasItems">
            <summary>
            HasItems state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateHasItems">
            <summary>
            HasItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateNoItems">
            <summary>
            NoItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.GroupIncrease">
            <summary>
            Increment state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateIncreaseEnabled">
            <summary>
            State enabled for increment group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateIncreaseDisabled">
            <summary>
            State disabled for increment group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.GroupDecrease">
            <summary>
            Decrement state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateDecreaseEnabled">
            <summary>
            State enabled for decrement group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateDecreaseDisabled">
            <summary>
            State disabled for decrement group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.GroupInteractionMode">
            <summary>
            InteractionMode state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateEdit">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateDisplay">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.GroupLocked">
            <summary>
            DisplayMode state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateLocked">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateUnlocked">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateActive">
            <summary>
            Active state.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateInactive">
            <summary>
            Inactive state.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.GroupActive">
            <summary>
            Active state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateUnwatermarked">
            <summary>
            Non-watermarked state.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateWatermarked">
            <summary>
            Watermarked state.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.GroupWatermark">
            <summary>
            Watermark state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateCalendarButtonUnfocused">
            <summary>
            Unfocused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateCalendarButtonFocused">
            <summary>
            Focused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.GroupCalendarButtonFocus">
            <summary>
            CalendarButtons Focus state group.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateBusy">
            <summary>
            Busy state for BusyIndicator.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateIdle">
            <summary>
            Idle state for BusyIndicator.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.GroupBusyStatus">
            <summary>
            Busyness group name.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateVisible">
            <summary>
            Visible state name for BusyIndicator.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.StateHidden">
            <summary>
            Hidden state name for BusyIndicator.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Common.VisualStates.GroupVisibility">
            <summary>
            BusyDisplay group.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Common.VisualStates.GoToState(Windows.UI.Xaml.Controls.Control,System.Boolean,System.String[])">
            <summary>
            Use VisualStateManager to change the visual state of the control.
            </summary>
            <param name="control">
            Control whose visual state is being changed.
            </param>
            <param name="useTransitions">
            A value indicating whether to use transitions when updating the
            visual state, or to snap directly to the new visual state.
            </param>
            <param name="stateNames">
            Ordered list of state names and fallback states to transition into.
            Only the first state to be found will be used.
            </param>
        </member>
        <member name="M:StyleMVVM.Controls.Common.VisualStates.GetImplementationRoot(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <param name="dependencyObject">The DependencyObject.</param>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
            <returns>Returns the implementation root or null.</returns>
        </member>
        <member name="M:StyleMVVM.Controls.Common.VisualStates.TryGetVisualStateGroup(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            This method tries to get the named VisualStateGroup for the 
            dependency object. The provided object's ImplementationRoot will be 
            looked up in this call.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="groupName">The visual state group's name.</param>
            <returns>Returns null or the VisualStateGroup object.</returns>
        </member>
        <member name="T:StyleMVVM.Controls.ContentControl.HeaderedContentControl">
            <summary>
            Provides the base implementation for controls that contain a single
            content element and a header.
            </summary>
            <remarks>
            HeaderedContentControl adds Header and HeaderTemplatefeatures to a
            ContentControl. HasHeader and HeaderTemplateSelector are removed for
            lack of support and consistency with other Silverlight controls.
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:StyleMVVM.Controls.ContentControl.HeaderedContentControl.InternalHeaderProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            dependency property.
            </value>
        </member>
        <member name="M:StyleMVVM.Controls.ContentControl.HeaderedContentControl.OnHeaderPropertyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            HeaderProperty property changed handler.
            </summary>
            <param name="d">HeaderedContentControl whose Header property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs, which contains the old and new value.</param>
        </member>
        <member name="F:StyleMVVM.Controls.ContentControl.HeaderedContentControl.InternalHeaderTemplateProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
            dependency property.
            </value>
        </member>
        <member name="M:StyleMVVM.Controls.ContentControl.HeaderedContentControl.OnHeaderTemplatePropertyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            HeaderTemplateProperty property changed handler.
            </summary>
            <param name="d">HeaderedContentControl whose HeaderTemplate property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs, which contains the old and new value.</param>
        </member>
        <member name="M:StyleMVVM.Controls.ContentControl.HeaderedContentControl.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.HeaderedContentControl" />
            class.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.ContentControl.HeaderedContentControl.OnHeaderChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            property changes.
            </summary>
            <param name="oldHeader">
            The old value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            property.
            </param>
            <param name="newHeader">
            The new value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            property.
            </param>
        </member>
        <member name="M:StyleMVVM.Controls.ContentControl.HeaderedContentControl.OnHeaderTemplateChanged(Windows.UI.Xaml.DataTemplate,Windows.UI.Xaml.DataTemplate)">
            <summary>
            Called when the value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
            property changes.
            </summary>
            <param name="oldHeaderTemplate">
            The old value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
            property.
            </param>
            <param name="newHeaderTemplate">
            The new value of the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
            property.
            </param>
        </member>
        <member name="P:StyleMVVM.Controls.ContentControl.HeaderedContentControl.Header">
            <summary>
            Gets or sets the content for the header of the control.
            </summary>
            <value>
            The content for the header of the control. The default value is
            null.
            </value>
        </member>
        <member name="P:StyleMVVM.Controls.ContentControl.HeaderedContentControl.HeaderTemplate">
            <summary>
            Gets or sets the template that is used to display the content of the
            control's header.
            </summary>
            <value>
            The template that is used to display the content of the control's
            header. The default is null.
            </value>
        </member>
        <member name="T:StyleMVVM.Controls.Expander.ExpandDirection">
            <summary>
            Specifies the direction in which an
            <see cref="T:System.Windows.Controls.Expander" /> control opens.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:StyleMVVM.Controls.Expander.ExpandDirection.Down">
            <summary>
            Specifies that the <see cref="T:System.Windows.Controls.Expander" />
            control opens in the down direction.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Expander.ExpandDirection.Up">
            <summary>
            Specifies that the <see cref="T:System.Windows.Controls.Expander" />
            control opens in the up direction.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Expander.ExpandDirection.Left">
            <summary>
            Specifies that the <see cref="T:System.Windows.Controls.Expander" />
            control opens in the left direction.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Expander.ExpandDirection.Right">
            <summary>
            Specifies that the <see cref="T:System.Windows.Controls.Expander" />
            control opens in the right direction.
            </summary>
        </member>
        <member name="T:StyleMVVM.Controls.Expander.Expander">
            <summary>
            Represents a control that displays a header and has a collapsible
            content window.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:StyleMVVM.Controls.Expander.Expander.ElementExpanderButtonName">
            <summary>
            The name of the ExpanderButton template part.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Expander.Expander._expanderButton">
            <summary>
            The ExpanderButton template part is a templated ToggleButton that's used 
            to expand and collapse the ExpandSite, which hosts the content.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Expander.Expander.InternalHeaderProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            dependency property.
            </value>
        </member>
        <member name="F:StyleMVVM.Controls.Expander.Expander.InternalHeaderTemplateProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
            dependency property.
            </value>
        </member>
        <member name="F:StyleMVVM.Controls.Expander.Expander.InternalExpandDirectionProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.Expander.ExpandDirection" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.Expander.ExpandDirection" />
            dependency property.
            </value>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.Expander.OnExpandDirectionPropertyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandDirectionProperty PropertyChangedCallback call back static function.
            This function validates the new value before calling virtual function OnExpandDirectionChanged.
            </summary>
            <param name="d">Expander object whose ExpandDirection property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs which contains the old and new values.</param>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.Expander.IsValidExpandDirection(System.Object)">
            <summary>
            Check whether the passed in value o is a valid ExpandDirection enum value.
            </summary>
            <param name="o">The value to be checked.</param>
            <returns>True if o is a valid ExpandDirection enum value, false o/w.</returns>
        </member>
        <member name="F:StyleMVVM.Controls.Expander.Expander.InternalIsExpandedProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.Expander.IsExpanded" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.Expander.IsExpanded" />
            dependency property.
            </value>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.Expander.OnIsExpandedPropertyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandedProperty PropertyChangedCallback static function.
            </summary>
            <param name="d">Expander object whose Expanded property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs which contains the old and new values.</param>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.Expander.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.Expander" /> class.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.Expander.OnApplyTemplate">
            <summary>
            Builds the visual tree for the
            <see cref="T:System.Windows.Controls.Expander" /> control when a new
            template is applied.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.Expander.OnCreateAutomationPeer">
            <summary>
            Returns a
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />
            for use by the Silverlight automation infrastructure.
            </summary>
            <returns>
            A
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />
            object for the <see cref="T:System.Windows.Controls.Expander" />.
            </returns>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.Expander.OnKeyDown(Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.KeyDown" /> event.
            </summary>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.Expander.OnExpanded">
            <summary>
            Raises the
            <see cref="E:System.Windows.Controls.Expander.Expanded" /> event
            when the
            <see cref="P:System.Windows.Controls.Expander.IsExpanded" />
            property changes from false to true.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.Expander.OnCollapsed">
            <summary>
            Raises the
            <see cref="E:System.Windows.Controls.Expander.Collapsed" /> event
            when the
            <see cref="P:System.Windows.Controls.Expander.IsExpanded" />
            property changes from true to false.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.Expander.ToggleExpanded(Windows.UI.Xaml.RoutedEventHandler,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Handle changes to the IsExpanded property.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.Expander.RaiseEvent(Windows.UI.Xaml.RoutedEventHandler,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Raise a RoutedEvent.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.Expander.OnExpanderButtonClicked(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Handle ExpanderButton's click event.
            </summary>
            <param name="sender">The ExpanderButton in template.</param>
            <param name="e">Routed event arg.</param>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.Expander.StyleMVVM#Controls#Common#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.Expander.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual state of the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:StyleMVVM.Controls.Expander.Expander.ExpanderButton">
            <summary>
            Gets or sets the ExpanderButton template part.
            </summary>
        </member>
        <member name="P:StyleMVVM.Controls.Expander.Expander.Header">
            <summary>
            Gets or sets the content for the header of the control.
            </summary>
            <value>
            The content for the header of the control. The default value is
            null.
            </value>
        </member>
        <member name="P:StyleMVVM.Controls.Expander.Expander.HeaderTemplate">
            <summary>
            Gets or sets the template that is used to display the content of the
            control's header.
            </summary>
            <value>
            The template that is used to display the content of the control's
            header. The default is null.
            </value>
        </member>
        <member name="P:StyleMVVM.Controls.Expander.Expander.ExpandDirection">
            <summary>
            Gets or sets the direction in which the
            <see cref="T:System.Windows.Controls.Expander" /> content window
            opens.
            </summary>
            <value>
            One of the <see cref="T:System.Windows.Controls.ExpandDirection" />
            values that define which direction the content window opens.  The
            default is
            <see cref="F:System.Windows.Controls.ExpandDirection.Down" />.
            </value>
        </member>
        <member name="P:StyleMVVM.Controls.Expander.Expander.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the
            <see cref="T:System.Windows.Controls.Expander" /> content window is
            visible.
            </summary>
            <value>
            True if the content window is expanded; otherwise, false. The
            default is false.
            </value>
        </member>
        <member name="E:StyleMVVM.Controls.Expander.Expander.Expanded">
            <summary>
            Occurs when the content window of an
            <see cref="T:System.Windows.Controls.Expander" /> control opens to
            display both its header and content.
            </summary>
        </member>
        <member name="E:StyleMVVM.Controls.Expander.Expander.Collapsed">
            <summary>
            Occurs when the content window of an
            <see cref="T:System.Windows.Controls.Expander" /> control closes and
            only the
            <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />
            is visible.
            </summary>
        </member>
        <member name="P:StyleMVVM.Controls.Expander.Expander.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="T:StyleMVVM.Controls.Expander.ExpanderAutomationPeer">
            <summary>
            Exposes <see cref="T:System.Windows.Controls.Expander" /> types to UI
            automation.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.ExpanderAutomationPeer.#ctor(StyleMVVM.Controls.Expander.Expander)">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />
            class.
            </summary>
            <param name="owner">
            The element associated with this automation peer.
            </param>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.ExpanderAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the
            <see cref="T:System.Windows.Controls.Expander" /> that is associated
            with this
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />.
            This method is called by
            <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.
            </summary>
            <returns>
            The
            <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Group" />
            enumeration value.
            </returns>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.ExpanderAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the
            <see cref="T:System.Windows.Controls.Expander" /> that is associated
            with this
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />.
            This method is called by
            <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.
            </summary>
            <returns>A string that contains Expander.</returns>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.ExpanderAutomationPeer.GetPatternCore(Windows.UI.Xaml.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the
            <see cref="T:System.Windows.Controls.Expander" /> that is associated
            with this
            <see cref="T:System.Windows.Automation.Peers.ExpanderAutomationPeer" />.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>
            The object that implements the pattern interface, or null if the
            specified pattern interface is not implemented by this peer.
            </returns>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.ExpanderAutomationPeer.Windows#UI#Xaml#Automation#Provider#IExpandCollapseProvider#Expand">
            <summary>
            Displays all child nodes, controls, or content of the control.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.ExpanderAutomationPeer.Windows#UI#Xaml#Automation#Provider#IExpandCollapseProvider#Collapse">
            <summary>
            Hides all nodes, controls, or content that are descendants of the
            control.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:StyleMVVM.Controls.Expander.ExpanderAutomationPeer.RaiseExpandCollapseAutomationEvent(System.Boolean,System.Boolean)">
            <summary>
            Raise an automation event when a Expander is expanded or collapsed.
            </summary>
            <param name="oldValue">
            A value indicating whether the Expander was expanded.
            </param>
            <param name="newValue">
            A value indicating whether the Expander is expanded.
            </param>
        </member>
        <member name="P:StyleMVVM.Controls.Expander.ExpanderAutomationPeer.Windows#UI#Xaml#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
            <summary>
            Gets the state (expanded or collapsed) of the control.
            </summary>
            <value>
            The state (expanded or collapsed) of the control.
            </value>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="F:StyleMVVM.Controls.Input.WatermarkTextBox.InternalWatermarkTextProperty">
            <summary>
            WatermarkText Dependency Property
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Input.WatermarkTextBox.InternalWatermarkStyleProperty">
            <summary>
            WatermarkStyle Dependency Property
            </summary>
        </member>
        <member name="P:StyleMVVM.Controls.Input.WatermarkTextBox.WatermarkText">
            <summary>
            Gets or sets the WatermarkText property. This dependency property 
            indicates the watermark text to show to the user.
            </summary>
        </member>
        <member name="P:StyleMVVM.Controls.Input.WatermarkTextBox.WatermarkStyle">
            <summary>
            Gets or sets the WatermarkStyle property. This dependency property 
            indicates the style of the watermark (TextBlock).
            </summary>
        </member>
        <member name="T:StyleMVVM.Controls.Layouts.DockPanel">
            <summary>
            Arranges child elements around the edges of the panel.  Optionally, 
            last added child element can occupy the remaining space.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:StyleMVVM.Controls.Layouts.DockPanel._ignorePropertyChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Layouts.DockPanel.InternalLastChildFillProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.DockPanel.LastChildFill" />
            dependency property.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Layouts.DockPanel.OnLastChildFillPropertyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            LastChildFillProperty property changed handler.
            </summary>
            <param name="d">DockPanel that changed its LastChildFill.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:StyleMVVM.Controls.Layouts.DockPanel.GetDock(Windows.UI.Xaml.UIElement)">
            <summary>
            Gets the value of the
            <see cref="P:System.Windows.Controls.DockPanel.Dock" /> attached
            property for the specified element.
            </summary>
            <param name="element">
            The element from which the property value is read.
            </param>
            <returns>
            The <see cref="P:System.Windows.Controls.DockPanel.Dock" /> property
            value for the element.
            </returns>
        </member>
        <member name="M:StyleMVVM.Controls.Layouts.DockPanel.SetDock(Windows.UI.Xaml.UIElement,StyleMVVM.Controls.Layouts.Dock)">
            <summary>
            Sets the value of the
            <see cref="P:System.Windows.Controls.DockPanel.Dock" /> attached
            property for the specified element to the specified dock value.
            </summary>
            <param name="element">
            The element to which the attached property is assigned.
            </param>
            <param name="dock">
            The dock value to assign to the specified element.
            </param>
        </member>
        <member name="F:StyleMVVM.Controls.Layouts.DockPanel.InternalDockProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.DockPanel.Dock" />
            attached property.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Layouts.DockPanel.OnDockPropertyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            DockProperty property changed handler.
            </summary>
            <param name="d">UIElement that changed its Dock.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:StyleMVVM.Controls.Layouts.DockPanel.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.DockPanel" /> class.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Layouts.DockPanel.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Measures the child elements of a
            <see cref="T:System.Windows.Controls.DockPanel" /> in preparation
            for arranging them during the
            <see cref="M:System.Windows.Controls.DockPanel.ArrangeOverride(System.Windows.Size)" />
            pass.
            </summary>
            <param name="constraint">
            The area available to the
            <see cref="T:System.Windows.Controls.DockPanel" />.
            </param>
            <returns>
            The desired size of the
            <see cref="T:System.Windows.Controls.DockPanel" />.
            </returns>
        </member>
        <member name="M:StyleMVVM.Controls.Layouts.DockPanel.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Arranges the child elements of the
            <see cref="T:System.Windows.Controls.DockPanel" /> control.
            </summary>
            <param name="arrangeSize">
            The area in the parent element that the
            <see cref="T:System.Windows.Controls.DockPanel" /> should use to
            arrange its child elements.
            </param>
            <returns>
            The actual size of the
            <see cref="T:System.Windows.Controls.DockPanel" /> after the child
            elements are arranged. The actual size should always equal
            <paramref name="arrangeSize" />.
            </returns>
        </member>
        <member name="P:StyleMVVM.Controls.Layouts.DockPanel.LastChildFill">
            <summary>
            Gets or sets a value indicating whether the last child element
            added to a <see cref="T:System.Windows.Controls.DockPanel" />
            resizes to fill the remaining space.
            </summary>
            <value>
            True if the last element added resizes to fill the remaining space,
            false to indicate the last element does not resize. The default is
            true.
            </value>
        </member>
        <member name="T:StyleMVVM.Controls.Layouts.OrientedSize">
            <summary>
            The OrientedSize structure is used to abstract the growth direction from
            the layout algorithms of WrapPanel.  When the growth direction is
            oriented horizontally (ex: the next element is arranged on the side of
            the previous element), then the Width grows directly with the placement
            of elements and Height grows indirectly with the size of the largest
            element in the row.  When the orientation is reversed, so is the
            directional growth with respect to Width and Height.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Layouts.OrientedSize._orientation">
            <summary>
            The orientation of the structure.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Layouts.OrientedSize._direct">
            <summary>
            The size dimension that grows directly with layout placement.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Layouts.OrientedSize._indirect">
            <summary>
            The size dimension that grows indirectly with the maximum value of
            the layout row or column.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Layouts.OrientedSize.#ctor(Windows.UI.Xaml.Controls.Orientation)">
            <summary>
            Initializes a new OrientedSize structure.
            </summary>
            <param name="orientation">Orientation of the structure.</param>
        </member>
        <member name="M:StyleMVVM.Controls.Layouts.OrientedSize.#ctor(Windows.UI.Xaml.Controls.Orientation,System.Double,System.Double)">
            <summary>
            Initializes a new OrientedSize structure.
            </summary>
            <param name="orientation">Orientation of the structure.</param>
            <param name="width">Un-oriented width of the structure.</param>
            <param name="height">Un-oriented height of the structure.</param>
        </member>
        <member name="P:StyleMVVM.Controls.Layouts.OrientedSize.Orientation">
            <summary>
            Gets the orientation of the structure.
            </summary>
        </member>
        <member name="P:StyleMVVM.Controls.Layouts.OrientedSize.Direct">
            <summary>
            Gets or sets the size dimension that grows directly with layout
            placement.
            </summary>
        </member>
        <member name="P:StyleMVVM.Controls.Layouts.OrientedSize.Indirect">
            <summary>
            Gets or sets the size dimension that grows indirectly with the
            maximum value of the layout row or column.
            </summary>
        </member>
        <member name="P:StyleMVVM.Controls.Layouts.OrientedSize.Width">
            <summary>
            Gets or sets the width of the size.
            </summary>
        </member>
        <member name="P:StyleMVVM.Controls.Layouts.OrientedSize.Height">
            <summary>
            Gets or sets the height of the size.
            </summary>
        </member>
        <member name="T:StyleMVVM.Controls.Layouts.WrapPanel">
            <summary>
            Positions child elements sequentially from left to right or top to
            bottom.  When elements extend beyond the panel edge, elements are
            positioned in the next row or column.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:StyleMVVM.Controls.Layouts.WrapPanel._ignorePropertyChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="F:StyleMVVM.Controls.Layouts.WrapPanel.InternalItemHeightProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.WrapPanel.ItemHeight" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.WrapPanel.ItemHeight" />
            dependency property
            </value>
        </member>
        <member name="F:StyleMVVM.Controls.Layouts.WrapPanel.InternalItemWidthProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.WrapPanel.ItemWidth" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.WrapPanel.ItemWidth" />
            dependency property.
            </value>
        </member>
        <member name="F:StyleMVVM.Controls.Layouts.WrapPanel.InternalOrientationProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.WrapPanel.Orientation" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.WrapPanel.Orientation" />
            dependency property.
            </value>
        </member>
        <member name="M:StyleMVVM.Controls.Layouts.WrapPanel.OnOrientationPropertyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="d">WrapPanel that changed its Orientation.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:StyleMVVM.Controls.Layouts.WrapPanel.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.WrapPanel" /> class.
            </summary>
        </member>
        <member name="M:StyleMVVM.Controls.Layouts.WrapPanel.OnItemHeightOrWidthPropertyChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed handler for ItemHeight and ItemWidth.
            </summary>
            <param name="d">
            WrapPanel that changed its ItemHeight or ItemWidth.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:StyleMVVM.Controls.Layouts.WrapPanel.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Measures the child elements of a
            <see cref="T:System.Windows.Controls.WrapPanel" /> in anticipation
            of arranging them during the
            <see cref="M:System.Windows.Controls.WrapPanel.ArrangeOverride(System.Windows.Size)" />
            pass.
            </summary>
            <param name="constraint">
            The size available to child elements of the wrap panel.
            </param>
            <returns>
            The size required by the
            <see cref="T:System.Windows.Controls.WrapPanel" /> and its 
            elements.
            </returns>
        </member>
        <member name="M:StyleMVVM.Controls.Layouts.WrapPanel.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Arranges and sizes the
            <see cref="T:System.Windows.Controls.WrapPanel" /> control and its
            child elements.
            </summary>
            <param name="finalSize">
            The area within the parent that the
            <see cref="T:System.Windows.Controls.WrapPanel" /> should use 
            arrange itself and its children.
            </param>
            <returns>
            The actual size used by the
            <see cref="T:System.Windows.Controls.WrapPanel" />.
            </returns>
        </member>
        <member name="M:StyleMVVM.Controls.Layouts.WrapPanel.ArrangeLine(System.Int32,System.Int32,System.Nullable{System.Double},System.Double,System.Double)">
            <summary>
            Arrange a sequence of elements in a single line.
            </summary>
            <param name="lineStart">
            Index of the first element in the sequence to arrange.
            </param>
            <param name="lineEnd">
            Index of the last element in the sequence to arrange.
            </param>
            <param name="directDelta">
            Optional fixed growth in the primary direction.
            </param>
            <param name="indirectOffset">
            Offset of the line in the indirect direction.
            </param>
            <param name="indirectGrowth">
            Shared indirect growth of the elements on this line.
            </param>
        </member>
        <member name="P:StyleMVVM.Controls.Layouts.WrapPanel.ItemHeight">
            <summary>
            Gets or sets the height of the layout area for each item that is
            contained in a <see cref="T:System.Windows.Controls.WrapPanel" />.
            </summary>
            <value>
            The height applied to the layout area of each item that is contained
            within a <see cref="T:System.Windows.Controls.WrapPanel" />.  The
            default value is <see cref="F:System.Double.NaN" />.
            </value>
        </member>
        <member name="P:StyleMVVM.Controls.Layouts.WrapPanel.ItemWidth">
            <summary>
            Gets or sets the width of the layout area for each item that is
            contained in a <see cref="T:System.Windows.Controls.WrapPanel" />.
            </summary>
            <value>
            The width that applies to the layout area of each item that is
            contained in a <see cref="T:System.Windows.Controls.WrapPanel" />.
            The default value is <see cref="F:System.Double.NaN" />.
            </value>
        </member>
        <member name="P:StyleMVVM.Controls.Layouts.WrapPanel.Orientation">
            <summary>
            Gets or sets the direction in which child elements are arranged.
            </summary>
            <value>
            One of the <see cref="T:System.Windows.Controls.Orientation" />
            values.  The default is
            <see cref="F:System.Windows.Controls.Orientation.Horizontal" />.
            </value>
        </member>
    </members>
</doc>
